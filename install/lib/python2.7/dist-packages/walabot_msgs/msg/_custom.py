# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from walabot_msgs/custom.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class custom(genpy.Message):
  _md5sum = "fd215d06f432e497fd301996b833fa32"
  _type = "walabot_msgs/custom"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 R_Min
float32 R_Max
float32 R_Res
float32 Theta_Min
float32 Theta_Max
float32 Theta_Res
float32 Phi_Min
float32 Phi_Max
float32 Phi_Res
float32 Threshold
"""
  __slots__ = ['R_Min','R_Max','R_Res','Theta_Min','Theta_Max','Theta_Res','Phi_Min','Phi_Max','Phi_Res','Threshold']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       R_Min,R_Max,R_Res,Theta_Min,Theta_Max,Theta_Res,Phi_Min,Phi_Max,Phi_Res,Threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(custom, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.R_Min is None:
        self.R_Min = 0.
      if self.R_Max is None:
        self.R_Max = 0.
      if self.R_Res is None:
        self.R_Res = 0.
      if self.Theta_Min is None:
        self.Theta_Min = 0.
      if self.Theta_Max is None:
        self.Theta_Max = 0.
      if self.Theta_Res is None:
        self.Theta_Res = 0.
      if self.Phi_Min is None:
        self.Phi_Min = 0.
      if self.Phi_Max is None:
        self.Phi_Max = 0.
      if self.Phi_Res is None:
        self.Phi_Res = 0.
      if self.Threshold is None:
        self.Threshold = 0.
    else:
      self.R_Min = 0.
      self.R_Max = 0.
      self.R_Res = 0.
      self.Theta_Min = 0.
      self.Theta_Max = 0.
      self.Theta_Res = 0.
      self.Phi_Min = 0.
      self.Phi_Max = 0.
      self.Phi_Res = 0.
      self.Threshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10f().pack(_x.R_Min, _x.R_Max, _x.R_Res, _x.Theta_Min, _x.Theta_Max, _x.Theta_Res, _x.Phi_Min, _x.Phi_Max, _x.Phi_Res, _x.Threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.R_Min, _x.R_Max, _x.R_Res, _x.Theta_Min, _x.Theta_Max, _x.Theta_Res, _x.Phi_Min, _x.Phi_Max, _x.Phi_Res, _x.Threshold,) = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10f().pack(_x.R_Min, _x.R_Max, _x.R_Res, _x.Theta_Min, _x.Theta_Max, _x.Theta_Res, _x.Phi_Min, _x.Phi_Max, _x.Phi_Res, _x.Threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.R_Min, _x.R_Max, _x.R_Res, _x.Theta_Min, _x.Theta_Max, _x.Theta_Res, _x.Phi_Min, _x.Phi_Max, _x.Phi_Res, _x.Threshold,) = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
